generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  email            String     @unique
  password         String
  role             String // admin, client e freelancer
  username         String?
  fullName         String?
  bio              String?
  skills           String?
  companyName      String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  createdProjects  Project[]  @relation("CreatedProjects")
  proposals        Proposal[] @relation("FreelancerProposals")
  givenReviews     Review[]   @relation("ReviewerReviews")
  receivedReviews  Review[]   @relation("RevieweeReviews")
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
}

model Freelancer {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  skills      String[]
  description String?
  hourlyRate  Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Client {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  budget      Float
  deadline    DateTime
  status      String     @default("open")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  client      User       @relation("CreatedProjects", fields: [clientId], references: [id])
  clientId    Int
  proposals   Proposal[]
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  reviews     Review[]
  messages    Message[]
}

model Proposal {
  id           Int      @id @default(autoincrement())
  content      String
  price        Float
  status       String   @default("pending") // pending, accepted, rejected
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  project      Project  @relation(fields: [projectId], references: [id])
  projectId    Int
  freelancer   User     @relation("FreelancerProposals", fields: [freelancerId], references: [id])
  freelancerId Int
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  projects Project[]
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
  reviewer   User     @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  reviewerId Int
  reviewee   User     @relation("RevieweeReviews", fields: [revieweeId], references: [id])
  revieweeId Int
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
}
